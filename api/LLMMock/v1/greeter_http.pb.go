// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.21.6
// source: LLMMock/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterDeleteHistory = "/helloworld.v1.Greeter/DeleteHistory"
const OperationGreeterGetHistory = "/helloworld.v1.Greeter/GetHistory"
const OperationGreeterSayHello = "/helloworld.v1.Greeter/SayHello"
const OperationGreeterSendMessage = "/helloworld.v1.Greeter/SendMessage"

type GreeterHTTPServer interface {
	DeleteHistory(context.Context, *DeleteHistoryRequest) (*DeleteHistoryReply, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryReply, error)
	// SayHello根目录，验证服务是否正常运行，无需参数
	SayHello(context.Context, *RootRequest) (*RootReply, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/helloworld.v1.Greeter/SayHello", _Greeter_SayHello0_HTTP_Handler(srv))
	r.POST("/chat", _Greeter_SendMessage0_HTTP_Handler(srv))
	r.GET("/history", _Greeter_GetHistory0_HTTP_Handler(srv))
	r.POST("/history", _Greeter_DeleteHistory0_HTTP_Handler(srv))
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RootRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*RootRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RootReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_SendMessage0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*SendMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetHistory0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHistory(ctx, req.(*GetHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_DeleteHistory0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHistoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterDeleteHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHistory(ctx, req.(*DeleteHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteHistoryReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	DeleteHistory(ctx context.Context, req *DeleteHistoryRequest, opts ...http.CallOption) (rsp *DeleteHistoryReply, err error)
	GetHistory(ctx context.Context, req *GetHistoryRequest, opts ...http.CallOption) (rsp *GetHistoryReply, err error)
	SayHello(ctx context.Context, req *RootRequest, opts ...http.CallOption) (rsp *RootReply, err error)
	SendMessage(ctx context.Context, req *SendMessageRequest, opts ...http.CallOption) (rsp *SendMessageReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...http.CallOption) (*DeleteHistoryReply, error) {
	var out DeleteHistoryReply
	pattern := "/history"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterDeleteHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...http.CallOption) (*GetHistoryReply, error) {
	var out GetHistoryReply
	pattern := "/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) SayHello(ctx context.Context, in *RootRequest, opts ...http.CallOption) (*RootReply, error) {
	var out RootReply
	pattern := "/helloworld.v1.Greeter/SayHello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...http.CallOption) (*SendMessageReply, error) {
	var out SendMessageReply
	pattern := "/chat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
